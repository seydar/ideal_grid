TODO
-----------------------------
* move filter_kruskal.rb into graph.rb
* also integrate k_means_pp.rb et al into graph.rb
* make edge/node more specific to line/load
* **ADD PARALLELIZATION SERIALIZATION METHOD TO EASE PARALLELIZATION**
  * for when dealing with the serialization of objects (mapping the copies
    to their originals based on IDs/returning IDs instead of modifying
    objects) across parallelization boundaries

* How do we add edges between nodes?
  * How do we do it smartly?
* How do we decide whether to enlarge a generator or build a new one?
  * there is currently no method to this madness

* Physarum polycephalum is the bacteria that can develop optimal transportation networks
* RandiÄ‡ index could be useful?
  * https://www.sciencedirect.com/science/article/pii/S0972860017301408

* When constructing an edge between two nodes, see if part of the edge can be
  shortened by going through already-created edges that pass nearby it

DONE
----------------------------
* Fix k_means where it doesn't converge sometimes
  * i cheated, though: i fixed it by using a different k-means implementation
* edges need to have transmission loss. there needs to be a penalty for longer transmission lines
* Easy way to get the total load of a node
  * given node and path and *where it is on its journey*, calculate how
    much load is passing through that part of the trip

BUGGY RUNS
---------------------------------
./grid.rb -n 1000 -c 60
./grid.rb -n 1000 -c 80
./grid.rb -n 25 -c 3
./grid.rb -n 1000 -c 400

