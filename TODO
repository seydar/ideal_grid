TODO
-----------------------------
* move filter_kruskal.rb into graph.rb
* also integrate k_means_pp.rb et al into graph.rb
* **ADD PARALLELIZATION SERIALIZATION METHOD TO EASE PARALLELIZATION**
  * for when dealing with the serialization of objects (mapping the copies
    to their originals based on IDs/returning IDs instead of modifying
    objects) across parallelization boundaries

* How do we decide whether to enlarge a generator or build a new one?
  * there is currently no method to this madness

* Physarum polycephalum is the bacteria that can develop optimal transportation networks
* RandiÄ‡ index could be useful?
  * https://www.sciencedirect.com/science/article/pii/S0972860017301408

* Why aren't unreached nodes being highlighted during plotting?

* Are the MISO and ISO-NE lists complete? There's no way. They're so few! CAISO is 10k nodes!!!

* Split out the grid.rb interface from interacting with the DB and
  having all relevant classes be available
* Add DB caching via memcache
* Plot a choropleth of the US as a background
* Download the trx line data using the precise region of the ISOs/RTOs
  * programmatically. somehow. i dunno yet.
* `Grid` only works with a ConnectedGraph. Is there a way to make it work with
  a DisjointGraph?
* PARALLELIZE THE SHORTEST CYCLE ALGORITHM
  * easy. parallelize the cycle from each node.
* switch pry to IRB

TASKS
-------------------------
* fix #calculate_flows! on NEW_ENGLAND
* verify #reduce_congestion works on NEW_ENGLAND
* parallelize #shortest_cycle
* import "miso_north_tx_lines.geosjon"
  * needs the parallelization first
  * memory does not appear to be a problem, thank god for pointers

DONE
----------------------------
* Fix k_means where it doesn't converge sometimes
  * i cheated, though: i fixed it by using a different k-means implementation
* edges need to have transmission loss. there needs to be a penalty for longer transmission lines
* Easy way to get the total load of a node
  * given node and path and *where it is on its journey*, calculate how
    much load is passing through that part of the trip
* Instead of looking for high-flow edges to connect to, look for nodes that are
  drawing power from far-away generators. the distances are calculated during the
  flow calculations, and we just have to beat that number.
* When constructing an edge between two nodes, see if part of the edge can be
  shortened by going through already-created edges that pass nearby it
* How do we add edges between nodes?
  * How do we do it smartly?
* **BUILD A DB FOR TRACKING NODES AND TRANSMISSION LINES**
  * at the very least, just for nodes, since those come from disparate resources
  * but yeah, lines too
* make edge/node more specific to line/load
  * in the DB, it'll be line/load, but when doing graph operations, it'll be node/edge
* Identifying the shortest cycle isn't working the way it should... but once we can
  identify the shortest cycles, we can delete an edge from them and restore balance to
  the graph. Only looking at cycles <= 4

BUGGY RUNS
---------------------------------


DATA
-------------------------------
https://hifld-geoplatform.opendata.arcgis.com/datasets/geoplatform::transmission-lines/explore?location=44.098241%2C-72.184173%2C8.55
https://hifld-geoplatform.opendata.arcgis.com/datasets/geoplatform::electric-planning-areas/explore?location=35.996286%2C-95.848305%2C5.17
https://hifld-geoplatform.opendata.arcgis.com/datasets/geoplatform::independent-system-operators-1/explore?location=36.658645%2C-95.679925%2C5.18
https://hifld-geoplatform.opendata.arcgis.com/datasets/geoplatform::ferc-regions/explore?location=42.550218%2C-122.156318%2C4.20
https://hifld-geoplatform.opendata.arcgis.com/datasets/geoplatform::power-plants-2/explore?location=44.159264%2C-120.288643%2C4.25

