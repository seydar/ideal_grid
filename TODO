TODO
-----------------------------
* move filter_kruskal.rb into graph.rb
* also integrate k_means_pp.rb et al into graph.rb
* **ADD PARALLELIZATION SERIALIZATION METHOD TO EASE PARALLELIZATION**
  * for when dealing with the serialization of objects (mapping the copies
    to their originals based on IDs/returning IDs instead of modifying
    objects) across parallelization boundaries

* How do we decide whether to enlarge a generator or build a new one?
  * there is currently no method to this madness

* Physarum polycephalum is the bacteria that can develop optimal transportation networks
* RandiÄ‡ index could be useful?
  * https://www.sciencedirect.com/science/article/pii/S0972860017301408

* Add DB caching via memcache
* Plot a choropleth of the US as a background
* `Grid` only works with a ConnectedGraph. Is there a way to make it work with
  a DisjointGraph?
* reduce_congestion - wow this bad boy uses a lot of RAM
  * gonna have to parallelize #reduce_congestion as well
* producing DG connected subgraphs is slow
* No longer have the algorithm to build new generators. Where do we build new sources if
  there are already generators on the map?
* How do we decide which generators to grow?

TASKS
-------------------------
* verify #reduce_congestion works on NEW_ENGLAND
* import "miso_north_tx_lines.geosjon"

DONE
----------------------------
* Fix k_means where it doesn't converge sometimes
  * i cheated, though: i fixed it by using a different k-means implementation
* edges need to have transmission loss. there needs to be a penalty for longer transmission lines
* Easy way to get the total load of a node
  * given node and path and *where it is on its journey*, calculate how
    much load is passing through that part of the trip
* Instead of looking for high-flow edges to connect to, look for nodes that are
  drawing power from far-away generators. the distances are calculated during the
  flow calculations, and we just have to beat that number.
* When constructing an edge between two nodes, see if part of the edge can be
  shortened by going through already-created edges that pass nearby it
* How do we add edges between nodes?
  * How do we do it smartly?
* **BUILD A DB FOR TRACKING NODES AND TRANSMISSION LINES**
  * at the very least, just for nodes, since those come from disparate resources
  * but yeah, lines too
* make edge/node more specific to line/load
  * in the DB, it'll be line/load, but when doing graph operations, it'll be node/edge
* Identifying the shortest cycle isn't working the way it should... but once we can
  identify the shortest cycles, we can delete an edge from them and restore balance to
  the graph. Only looking at cycles <= 4
* PARALLELIZE THE SHORTEST CYCLE ALGORITHM
  * easy. parallelize the cycle from each node.
* Okay, we have all of the data we need. HIFLD already join lines at substations.
  * and if you look at the plotting, you'll see that 99% of new england is already
    connected!
  * so how do we turn those lines into simplified edges?
    * rebuild the line simplification algorithms
* Split out the grid.rb interface from interacting with the DB and
  having all relevant classes be available
* map all loads to OSM points so we can ensure that they connect to the grid
  * done for New England, at least. the data is so shitty that it doesn't even matter
* parallelize calculate flows
  * each thread does its own subset of nodes and then the partial tallies are summed
  * no, that wouldn't work, because they have interdependence on when a generator
    can support more load
  * maybe i can copy parallelization of the MST algorithm? does such a parallelization
    exist?
    * that wouldn't even work, because it's just fundamentally different and i don't think
      MST can be parallelized
  * fixed by rewriting it entirely
* reduce congestion:
  * need to take the two biggest CGs that contain the sources, not simply the two biggest CGs
* flow detection
  * instead of having a load be entirely powered along the path to the closest
    generator, have only a *proportion* be powered by that generator
  * a true real-world sim would have some fraction of the voltage travel along
    ALL possible paths to each generator, but this is close enough
* get rid of the concept of reach

BUGGY RUNS
---------------------------------


DATA
-------------------------------
https://hifld-geoplatform.opendata.arcgis.com/datasets/geoplatform::transmission-lines/explore?location=44.098241%2C-72.184173%2C8.55
https://hifld-geoplatform.opendata.arcgis.com/datasets/geoplatform::electric-planning-areas/explore?location=35.996286%2C-95.848305%2C5.17
https://hifld-geoplatform.opendata.arcgis.com/datasets/geoplatform::independent-system-operators-1/explore?location=36.658645%2C-95.679925%2C5.18
https://hifld-geoplatform.opendata.arcgis.com/datasets/geoplatform::ferc-regions/explore?location=42.550218%2C-122.156318%2C4.20
https://hifld-geoplatform.opendata.arcgis.com/datasets/geoplatform::power-plants-2/explore?location=44.159264%2C-120.288643%2C4.25

